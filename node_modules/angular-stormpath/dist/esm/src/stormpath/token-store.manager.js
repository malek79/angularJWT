var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { LocalStorageService } from 'ng2-webstorage';
import { CookieService } from 'angular2-cookie/core';
import { Injectable } from '@angular/core';
import { AuthToken } from './auth.token';
var TokenStoreManager = /** @class */ (function () {
    function TokenStoreManager() {
    }
    TokenStoreManager.prototype.setToken = function (name, token) {
        // Store a time at which we should renew the token, subtract off one second to give us some buffer of time
        var exp = new Date(new Date().setMilliseconds(0) + ((token.expires_in - 1) * 1000));
        var authToken = new AuthToken(token.access_token, token.refresh_token, token.token_type, token.expires_in, token.expires_in, exp);
        this.put(name, authToken);
        return authToken;
    };
    return TokenStoreManager;
}());
export { TokenStoreManager };
var LocalStorageTokenStoreManager = /** @class */ (function (_super) {
    __extends(LocalStorageTokenStoreManager, _super);
    function LocalStorageTokenStoreManager(localStorage) {
        var _this = _super.call(this) || this;
        _this.localStorage = localStorage;
        return _this;
    }
    LocalStorageTokenStoreManager.prototype.get = function (key) {
        return this.localStorage.retrieve(key);
    };
    LocalStorageTokenStoreManager.prototype.put = function (key, value) {
        this.localStorage.store(key, value);
    };
    LocalStorageTokenStoreManager.prototype.remove = function (key) {
        this.localStorage.clear(key);
    };
    return LocalStorageTokenStoreManager;
}(TokenStoreManager));
export { LocalStorageTokenStoreManager };
var CookieTokenStoreManager = /** @class */ (function (_super) {
    __extends(CookieTokenStoreManager, _super);
    function CookieTokenStoreManager(cookieService) {
        var _this = _super.call(this) || this;
        _this.cookieService = cookieService;
        return _this;
    }
    CookieTokenStoreManager.prototype.get = function (key) {
        var token = this.cookieService.getObject(key);
        if (token) {
            return new AuthToken(token.accessToken, token.refreshToken, token.tokenType, token.expiresIn, token.expiresAt, token.exp);
        }
        else {
            return null;
        }
    };
    CookieTokenStoreManager.prototype.put = function (key, value) {
        this.cookieService.putObject(key, value);
    };
    CookieTokenStoreManager.prototype.remove = function (key) {
        this.cookieService.remove(key);
    };
    return CookieTokenStoreManager;
}(TokenStoreManager));
export { CookieTokenStoreManager };
//# sourceMappingURL=token-store.manager.js.map