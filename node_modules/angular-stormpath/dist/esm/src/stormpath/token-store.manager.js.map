{"version":3,"file":"token-store.manager.js","sourceRoot":"","sources":["../../../../src/stormpath/token-store.manager.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,gBAAgB,CAAC;AACrD,OAAO,EAAE,aAAa,EAAE,MAAM,sBAAsB,CAAC;AACrD,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,SAAS,EAAE,MAAM,cAAc,CAAC;AAEzC,IAAA;;;IAOE,oCAAQ,GAAR,UAAS,IAAY,EAAE,KAAU;;QAE/B,IAAI,GAAG,GAAS,IAAI,IAAI,CAAC,IAAI,IAAI,EAAE,CAAC,eAAe,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC,UAAU,GAAG,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;QAC1F,IAAI,SAAS,GAAc,IAAI,SAAS,CAAC,KAAK,CAAC,YAAY,EAAE,KAAK,CAAC,aAAa,EAAE,KAAK,CAAC,UAAU,EAChG,KAAK,CAAC,UAAU,EAAE,KAAK,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC;QAC3C,IAAI,CAAC,GAAG,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;QAC1B,MAAM,CAAC,SAAS,CAAC;KAClB;4BAnBH;IAoBC,CAAA;AAfD,6BAeC;;IAGkD,iDAAiB;IAElE,uCAAoB,YAAiC;QAArD,YACE,iBAAO,SACR;QAFmB,kBAAY,GAAZ,YAAY,CAAqB;;KAEpD;IAED,2CAAG,GAAH,UAAI,GAAW;QACb,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;KACxC;IAED,2CAAG,GAAH,UAAI,GAAW,EAAE,KAAgB;QAC/B,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;KACrC;IAED,8CAAM,GAAN,UAAO,GAAW;QAChB,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;KAC9B;wCAvCH;EAuBmD,iBAAiB;;;IAoBvB,2CAAiB;IAE5D,iCAAoB,aAA4B;QAAhD,YACE,iBAAO,SACR;QAFmB,mBAAa,GAAb,aAAa,CAAe;;KAE/C;IAED,qCAAG,GAAH,UAAI,GAAW;QACb,IAAI,KAAK,GAAQ,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;QACnD,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;YACV,MAAM,CAAC,IAAI,SAAS,CAAC,KAAK,CAAC,WAAW,EAAE,KAAK,CAAC,YAAY,EAAE,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,SAAS,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;SAC3H;QAAC,IAAI,CAAC,CAAC;YACN,MAAM,CAAC,IAAI,CAAC;SACb;KACF;IAED,qCAAG,GAAH,UAAI,GAAW,EAAE,KAAgB;QAC/B,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;KAC1C;IAED,wCAAM,GAAN,UAAO,GAAW;QAChB,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;KAChC;kCAhEH;EA2C6C,iBAAiB","sourcesContent":["import { LocalStorageService } from 'ng2-webstorage';\nimport { CookieService } from 'angular2-cookie/core';\nimport { Injectable } from '@angular/core';\nimport { AuthToken } from './auth.token';\n\nexport abstract class TokenStoreManager {\n  abstract get(key: string): AuthToken;\n\n  abstract put(key: string, value: AuthToken): any;\n\n  abstract remove(key: string): void;\n\n  setToken(name: string, token: any): AuthToken {\n    // Store a time at which we should renew the token, subtract off one second to give us some buffer of time\n    let exp: Date = new Date(new Date().setMilliseconds(0) + ((token.expires_in - 1) * 1000));\n    let authToken: AuthToken = new AuthToken(token.access_token, token.refresh_token, token.token_type,\n      token.expires_in, token.expires_in, exp);\n    this.put(name, authToken);\n    return authToken;\n  }\n}\n\n@Injectable()\nexport class LocalStorageTokenStoreManager extends TokenStoreManager {\n\n  constructor(private localStorage: LocalStorageService) {\n    super();\n  }\n\n  get(key: string): AuthToken {\n    return this.localStorage.retrieve(key);\n  }\n\n  put(key: string, value: AuthToken): void {\n    this.localStorage.store(key, value);\n  }\n\n  remove(key: string): void {\n    this.localStorage.clear(key);\n  }\n}\n\n@Injectable()\nexport class CookieTokenStoreManager extends TokenStoreManager {\n\n  constructor(private cookieService: CookieService) {\n    super();\n  }\n\n  get(key: string): AuthToken {\n    let token: any = this.cookieService.getObject(key);\n    if (token) {\n      return new AuthToken(token.accessToken, token.refreshToken, token.tokenType, token.expiresIn, token.expiresAt, token.exp);\n    } else {\n      return null;\n    }\n  }\n\n  put(key: string, value: AuthToken): void {\n    this.cookieService.putObject(key, value);\n  }\n\n  remove(key: string): void {\n    this.cookieService.remove(key);\n  }\n}\n"]}