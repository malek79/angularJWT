import { Injectable } from '@angular/core';
import { Headers } from '@angular/http';
var StormpathConstants = /** @class */ (function () {
    function StormpathConstants() {
    }
    return StormpathConstants;
}());
export { StormpathConstants };
var StormpathConfiguration = /** @class */ (function () {
    function StormpathConfiguration() {
        this._changeUri = StormpathConstants.CHANGE_PASSWORD_ENDPOINT;
        this._forgotUri = StormpathConstants.FORGOT_PASSWORD_ENDPOINT;
        this._loginUri = StormpathConstants.AUTHENTICATION_ENDPOINT;
        this._logoutUri = StormpathConstants.DESTROY_SESSION_ENDPOINT;
        this._oauthLoginUri = StormpathConstants.OAUTH_AUTHENTICATION_ENDPOINT;
        this._oauthLogoutUri = StormpathConstants.OAUTH_REVOKE_ENDPOINT;
        this._oauthTokenName = StormpathConstants.OAUTH_TOKEN_STORAGE_NAME;
        this._meUri = StormpathConstants.CURRENT_USER_URI;
        this._registerUri = StormpathConstants.REGISTER_URI;
        this._verifyUri = StormpathConstants.EMAIL_VERIFICATION_ENDPOINT;
        this._endpointPrefix = StormpathConstants.ENDPOINT_PREFIX;
        this._version = StormpathConstants.VERSION;
    }
    Object.defineProperty(StormpathConfiguration.prototype, "endpointUris", {
        /**
         * Return a list of all available URIs. This list is used to decide whether
         * X-Stormpath-Agent is sent as a header or not.
         *
         * @returns {[string]} Array of all Stormpath endpoints, in alphabetical order.
         */
        get: /**
           * Return a list of all available URIs. This list is used to decide whether
           * X-Stormpath-Agent is sent as a header or not.
           *
           * @returns {[string]} Array of all Stormpath endpoints, in alphabetical order.
           */
        function () {
            return [this.changeUri, this.forgotUri, this.loginUri, this.logoutUri, this.meUri, this.registerUri, this.verifyUri];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StormpathConfiguration.prototype, "autoAuthorizedUris", {
        /**
         * Return a list of URIs that get a Bearer token added automatically. To add to this list, use the following syntax:
         *
         * <pre>
         *   let config: StormpathConfiguration = new StormpathConfiguration();
         *   config.autoAuthorizedUris.push(new RegExp('http://localhost:3000/myapi/*)');
         * </pre>
         *
         * @returns {[string]}
         */
        get: /**
           * Return a list of URIs that get a Bearer token added automatically. To add to this list, use the following syntax:
           *
           * <pre>
           *   let config: StormpathConfiguration = new StormpathConfiguration();
           *   config.autoAuthorizedUris.push(new RegExp('http://localhost:3000/myapi/*)');
           * </pre>
           *
           * @returns {[string]}
           */
        function () {
            // if empty, set to me and return. Can't do in constructor because /me will be set as default
            // and won't be picked up if it's overriden by a developer.
            if (this._autoAuthorizedUris.length === 0) {
                this._autoAuthorizedUris = [new RegExp(this.meUri)];
            }
            return this._autoAuthorizedUris;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StormpathConfiguration.prototype, "changeUri", {
        get: function () {
            return this._endpointPrefix + this._changeUri;
        },
        set: function (value) {
            this._changeUri = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StormpathConfiguration.prototype, "forgotUri", {
        get: function () {
            return this._endpointPrefix + this._forgotUri;
        },
        set: function (value) {
            this._forgotUri = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StormpathConfiguration.prototype, "loginUri", {
        get: function () {
            return this._endpointPrefix + this._loginUri;
        },
        set: function (value) {
            this._loginUri = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StormpathConfiguration.prototype, "logoutUri", {
        get: function () {
            return this._endpointPrefix + this._logoutUri;
        },
        set: function (value) {
            this._logoutUri = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StormpathConfiguration.prototype, "oauthLoginUri", {
        get: function () {
            return this._endpointPrefix + this._oauthLoginUri;
        },
        set: function (value) {
            this._oauthLoginUri = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StormpathConfiguration.prototype, "oauthLogoutUri", {
        get: function () {
            return this._endpointPrefix + this._oauthLogoutUri;
        },
        set: function (value) {
            this._oauthLogoutUri = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StormpathConfiguration.prototype, "oauthTokenName", {
        get: function () {
            return this._oauthTokenName;
        },
        set: function (value) {
            this._oauthTokenName = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StormpathConfiguration.prototype, "meUri", {
        get: function () {
            return this._endpointPrefix + this._meUri;
        },
        set: function (value) {
            this._meUri = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StormpathConfiguration.prototype, "registerUri", {
        get: function () {
            return this._endpointPrefix + this._registerUri;
        },
        set: function (value) {
            this._registerUri = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StormpathConfiguration.prototype, "verifyUri", {
        get: function () {
            return this._endpointPrefix + this._verifyUri;
        },
        set: function (value) {
            this._verifyUri = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StormpathConfiguration.prototype, "endpointPrefix", {
        get: function () {
            return this._endpointPrefix;
        },
        set: function (value) {
            this._endpointPrefix = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StormpathConfiguration.prototype, "version", {
        get: function () {
            return this._version;
        },
        enumerable: true,
        configurable: true
    });
    return StormpathConfiguration;
}());
export { StormpathConfiguration };
//# sourceMappingURL=stormpath.config.js.map