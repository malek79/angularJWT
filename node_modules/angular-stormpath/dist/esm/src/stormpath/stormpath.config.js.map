{"version":3,"file":"stormpath.config.js","sourceRoot":"","sources":["../../../../src/stormpath/stormpath.config.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,OAAO,EAAE,MAAM,eAAe,CAAC;AAExC,IAAA;;;6BAHA;IAiIC,CAAA;AA9HD,8BA8HC;;IAkBC;QACE,IAAI,CAAC,UAAU,GAAG,kBAAkB,CAAC,wBAAwB,CAAC;QAC9D,IAAI,CAAC,UAAU,GAAG,kBAAkB,CAAC,wBAAwB,CAAC;QAC9D,IAAI,CAAC,SAAS,GAAG,kBAAkB,CAAC,uBAAuB,CAAC;QAC5D,IAAI,CAAC,UAAU,GAAG,kBAAkB,CAAC,wBAAwB,CAAC;QAC9D,IAAI,CAAC,cAAc,GAAG,kBAAkB,CAAC,6BAA6B,CAAC;QACvE,IAAI,CAAC,eAAe,GAAG,kBAAkB,CAAC,qBAAqB,CAAC;QAChE,IAAI,CAAC,eAAe,GAAG,kBAAkB,CAAC,wBAAwB,CAAC;QACnE,IAAI,CAAC,MAAM,GAAG,kBAAkB,CAAC,gBAAgB,CAAC;QAClD,IAAI,CAAC,YAAY,GAAG,kBAAkB,CAAC,YAAY,CAAC;QACpD,IAAI,CAAC,UAAU,GAAG,kBAAkB,CAAC,2BAA2B,CAAC;QACjE,IAAI,CAAC,eAAe,GAAG,kBAAkB,CAAC,eAAe,CAAC;QAC1D,IAAI,CAAC,QAAQ,GAAG,kBAAkB,CAAC,OAAO,CAAC;KAC5C;IAQD,sBAAI,gDAAY;QANhB;;;;;WAKG;;;;;;;QACH;YACE,MAAM,CAAC,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;SACtH;;;OAAA;IAYD,sBAAI,sDAAkB;QAVtB;;;;;;;;;WASG;;;;;;;;;;;QACH;;;YAGE,EAAE,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC1C,IAAI,CAAC,mBAAmB,GAAG,CAAC,IAAI,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;aACrD;YACD,MAAM,CAAC,IAAI,CAAC,mBAAmB,CAAC;SACjC;;;OAAA;IAED,sBAAI,6CAAS;aAAb;YACE,MAAM,CAAC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC;SAC/C;aAED,UAAc,KAAa;YACzB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;SACzB;;;OAJA;IAMD,sBAAI,6CAAS;aAAb;YACE,MAAM,CAAC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC;SAC/C;aAED,UAAc,KAAa;YACzB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;SACzB;;;OAJA;IAMD,sBAAI,4CAAQ;aAAZ;YACE,MAAM,CAAC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,SAAS,CAAC;SAC9C;aAED,UAAa,KAAa;YACxB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;SACxB;;;OAJA;IAMD,sBAAI,6CAAS;aAAb;YACE,MAAM,CAAC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC;SAC/C;aAED,UAAc,KAAa;YACzB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;SACzB;;;OAJA;IAMD,sBAAI,iDAAa;aAAjB;YACE,MAAM,CAAC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,cAAc,CAAC;SACnD;aAED,UAAkB,KAAa;YAC7B,IAAI,CAAC,cAAc,GAAG,KAAK,CAAC;SAC7B;;;OAJA;IAMD,sBAAI,kDAAc;aAAlB;YACE,MAAM,CAAC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC;SACpD;aAED,UAAmB,KAAa;YAC9B,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;SAC9B;;;OAJA;IAMD,sBAAI,kDAAc;aAAlB;YACE,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;SAC7B;aAED,UAAmB,KAAa;YAC9B,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;SAC9B;;;OAJA;IAMD,sBAAI,yCAAK;aAAT;YACE,MAAM,CAAC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,MAAM,CAAC;SAC3C;aAED,UAAU,KAAa;YACrB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;SACrB;;;OAJA;IAMD,sBAAI,+CAAW;aAAf;YACE,MAAM,CAAC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,YAAY,CAAC;SACjD;aAED,UAAgB,KAAa;YAC3B,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;SAC3B;;;OAJA;IAMD,sBAAI,6CAAS;aAAb;YACE,MAAM,CAAC,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,UAAU,CAAC;SAC/C;aAED,UAAc,KAAa;YACzB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;SACzB;;;OAJA;IAMD,sBAAI,kDAAc;aAAlB;YACE,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC;SAC7B;aAED,UAAmB,KAAa;YAC9B,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC;SAC9B;;;OAJA;IAMD,sBAAI,2CAAO;aAAX;YACE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC;SACtB;;;OAAA;iCAzRH","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Headers } from '@angular/http';\n\nexport class StormpathConstants {\n  public static readonly VERSION: string = '${VERSION}'; // This value will be overwritten by webpack\n\n  /**\n   * Default: `/login`\n   *\n   * The URI that the login form will post to.  The endpoint MUST accept data\n   * in the following format:\n   *\n   * ```\n   * {\n    *     username: '',\n    *     password: ''\n    * }\n   * ```\n   */\n  public static readonly AUTHENTICATION_ENDPOINT: string = '/login';\n\n  /**\n   * Default: `/oauth/token`\n   *\n   * The endpoint that is used to authenticate and refresh using OAuth tokens.\n   * This endpoint MUST support password and refresh_token grant authentication flows.\n   */\n  public static readonly OAUTH_AUTHENTICATION_ENDPOINT: string = '/oauth/token';\n\n  /**\n   * Default: 'stormpath:token'\n   *\n   * The name under which tokens are stored in the token storage mechanism.\n   * Might not be relevant if the underlying storage mechanism is not key-value based.\n   */\n  public static readonly OAUTH_TOKEN_STORAGE_NAME: string = 'stormpath:token';\n\n  public static readonly OAUTH_HEADERS: Headers = new Headers({\n    'Content-Type': 'application/x-www-form-urlencoded',\n    'Accept': 'application/json'\n  });\n\n  /**\n   * Default: `/me`\n   *\n   * The URI that is used to fetch the account object of\n   * the currently logged in user.  This endpoint MUST:\n   *  * Respond with a JSON object that is the Stormpath account object,\n   *  if the user has an active session.\n   *  * Respond with `401 Unauthorized` if the user has no session.\n   */\n  public static readonly CURRENT_USER_URI: string = '/me';\n\n  /**\n   * Default: `/logout`\n   *\n   * The URL that the logout action will make a GET request to, this endpoint\n   * MUST delete the access token cookie, XSRF token cookie, and any other cookies\n   * that relate to the user session.\n   */\n  public static readonly DESTROY_SESSION_ENDPOINT: string = '/logout';\n\n  /**\n   * Default: `/oauth/revoke`\n   *\n   * The endpoint that is used to revoke OAuth tokens.\n   */\n  public static readonly OAUTH_REVOKE_ENDPOINT: string = '/oauth/revoke';\n\n  /**\n   * Default: `/verify`\n   *\n   * The endpoint that is used for verifying an account that requires email\n   * verification.\n   *\n   * This endpoint MUST accept a POST request with the following format and\n   * use Stormpath to verify the token:\n   * ```\n   * {\n    *   sptoken: '<token from email sent to user>'\n    * }\n   * ```\n   *\n   */\n  public static readonly EMAIL_VERIFICATION_ENDPOINT: string = '/verify';\n\n  /**\n   * Default: `/forgot`\n   *\n   * The endpoint that is used by to create password reset tokens.\n   */\n  public static readonly FORGOT_PASSWORD_ENDPOINT: string = '/forgot';\n\n  /**\n   * Default: `/change`\n   *\n   * The endpoint that is used to verify and consume password reset tokens\n   * (change a user's password with the token).\n   */\n  public static readonly CHANGE_PASSWORD_ENDPOINT: string = '/change';\n\n  /**\n   * Default: `/register`\n   *\n   * The endpoint that is used to POST new users.  This endpoint MUST accept a\n   * stormpath account object and use Stormpath to create the new user.\n   */\n  public static readonly REGISTER_URI: string = '/register';\n\n  /**\n   * Default: *none*\n   *\n   * A prefix, e.g. \"base URL\" to add to all endpoints that are used by this SDK.\n   * Use this if your backend API is running on a different port or domain than\n   * your Angular application.  Omit the trailing forward slash.\n   *\n   * **NOTE:** This may trigger\n   * [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)\n   * behaviour in the browser, and your server\n   * will need to respond to requests accordingly.  If you are using our\n   * Express SDK see\n   * [allowedOrigins](https://github.com/stormpath/stormpath-sdk-express#allowedOrigins)\n   *\n   * **Example:**\n   * <pre>\n   *   ENDPOINT_PREFIX = 'http://api.mydomain.com'\n   * </pre>\n   */\n  public static readonly ENDPOINT_PREFIX: string = '';\n}\n\n@Injectable()\nexport class StormpathConfiguration {\n  private _changeUri: string;\n  private _forgotUri: string;\n  private _loginUri: string;\n  private _logoutUri: string;\n  private _oauthLoginUri: string;\n  private _oauthLogoutUri: string;\n  private _oauthTokenName: string;\n  private _meUri: string;\n  private _registerUri: string;\n  private _verifyUri: string;\n  private _endpointPrefix: string;\n  private _version: string;\n  private _autoAuthorizedUris: Array<RegExp> = [];\n\n  constructor() {\n    this._changeUri = StormpathConstants.CHANGE_PASSWORD_ENDPOINT;\n    this._forgotUri = StormpathConstants.FORGOT_PASSWORD_ENDPOINT;\n    this._loginUri = StormpathConstants.AUTHENTICATION_ENDPOINT;\n    this._logoutUri = StormpathConstants.DESTROY_SESSION_ENDPOINT;\n    this._oauthLoginUri = StormpathConstants.OAUTH_AUTHENTICATION_ENDPOINT;\n    this._oauthLogoutUri = StormpathConstants.OAUTH_REVOKE_ENDPOINT;\n    this._oauthTokenName = StormpathConstants.OAUTH_TOKEN_STORAGE_NAME;\n    this._meUri = StormpathConstants.CURRENT_USER_URI;\n    this._registerUri = StormpathConstants.REGISTER_URI;\n    this._verifyUri = StormpathConstants.EMAIL_VERIFICATION_ENDPOINT;\n    this._endpointPrefix = StormpathConstants.ENDPOINT_PREFIX;\n    this._version = StormpathConstants.VERSION;\n  }\n\n  /**\n   * Return a list of all available URIs. This list is used to decide whether\n   * X-Stormpath-Agent is sent as a header or not.\n   *\n   * @returns {[string]} Array of all Stormpath endpoints, in alphabetical order.\n   */\n  get endpointUris(): Array<string> {\n    return [this.changeUri, this.forgotUri, this.loginUri, this.logoutUri, this.meUri, this.registerUri, this.verifyUri];\n  }\n\n  /**\n   * Return a list of URIs that get a Bearer token added automatically. To add to this list, use the following syntax:\n   *\n   * <pre>\n   *   let config: StormpathConfiguration = new StormpathConfiguration();\n   *   config.autoAuthorizedUris.push(new RegExp('http://localhost:3000/myapi/*)');\n   * </pre>\n   *\n   * @returns {[string]}\n   */\n  get autoAuthorizedUris(): Array<RegExp>  {\n    // if empty, set to me and return. Can't do in constructor because /me will be set as default\n    // and won't be picked up if it's overriden by a developer.\n    if (this._autoAuthorizedUris.length === 0) {\n      this._autoAuthorizedUris = [new RegExp(this.meUri)];\n    }\n    return this._autoAuthorizedUris;\n  }\n\n  get changeUri(): string {\n    return this._endpointPrefix + this._changeUri;\n  }\n\n  set changeUri(value: string) {\n    this._changeUri = value;\n  }\n\n  get forgotUri(): string {\n    return this._endpointPrefix + this._forgotUri;\n  }\n\n  set forgotUri(value: string) {\n    this._forgotUri = value;\n  }\n\n  get loginUri(): string {\n    return this._endpointPrefix + this._loginUri;\n  }\n\n  set loginUri(value: string) {\n    this._loginUri = value;\n  }\n\n  get logoutUri(): string {\n    return this._endpointPrefix + this._logoutUri;\n  }\n\n  set logoutUri(value: string) {\n    this._logoutUri = value;\n  }\n\n  get oauthLoginUri(): string {\n    return this._endpointPrefix + this._oauthLoginUri;\n  }\n\n  set oauthLoginUri(value: string) {\n    this._oauthLoginUri = value;\n  }\n\n  get oauthLogoutUri(): string {\n    return this._endpointPrefix + this._oauthLogoutUri;\n  }\n\n  set oauthLogoutUri(value: string) {\n    this._oauthLogoutUri = value;\n  }\n\n  get oauthTokenName(): string {\n    return this._oauthTokenName;\n  }\n\n  set oauthTokenName(value: string) {\n    this._oauthTokenName = value;\n  }\n\n  get meUri(): string {\n    return this._endpointPrefix + this._meUri;\n  }\n\n  set meUri(value: string) {\n    this._meUri = value;\n  }\n\n  get registerUri(): string {\n    return this._endpointPrefix + this._registerUri;\n  }\n\n  set registerUri(value: string) {\n    this._registerUri = value;\n  }\n\n  get verifyUri(): string {\n    return this._endpointPrefix + this._verifyUri;\n  }\n\n  set verifyUri(value: string) {\n    this._verifyUri = value;\n  }\n\n  get endpointPrefix(): string {\n    return this._endpointPrefix;\n  }\n\n  set endpointPrefix(value: string) {\n    this._endpointPrefix = value;\n  }\n\n  get version(): string {\n    return this._version;\n  }\n}\n"]}