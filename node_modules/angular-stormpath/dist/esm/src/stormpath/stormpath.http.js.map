{"version":3,"file":"stormpath.http.js","sourceRoot":"","sources":["../../../../src/stormpath/stormpath.http.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,eAAe,CAAC;AAC5D,OAAO,EACL,IAAI,EACJ,iBAAiB,EACjB,QAAQ,EACR,kBAAkB,EAClB,OAAO,EACP,cAAc,EACd,UAAU,EACV,OAAO,EACR,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAC7C,OAAO,EAAE,cAAc,EAAE,MAAM,qBAAqB,CAAC;AACrD,OAAO,EAAE,iBAAiB,EAAE,MAAM,uBAAuB,CAAC;AAC1D,OAAO,EAAE,sBAAsB,EAAE,kBAAkB,EAAE,MAAM,oBAAoB,CAAC;AAChF,OAAO,EAAE,SAAS,EAAE,MAAM,cAAc,CAAC;;AAGzC,MAAM,sBAAsB,OAAmB,EAAE,cAA8B,EACnD,MAA8B,EAAE,UAA6B;IACvF,MAAM,CAAC,IAAI,aAAa,CAAC,OAAO,EAAE,cAAc,EAAE,MAAM,EAAE,UAAU,CAAC,CAAC;CACvE;;IAGkC,iCAAI;IAGrC,uBAAoB,OAA0B,EAC1B,cAA8B,EAC9B,MAA8B,EACR;QAH1C,YAIE,kBAAM,OAAO,EAAE,cAAc,CAAC,SAE/B;QANmB,aAAO,GAAP,OAAO,CAAmB;QAC1B,oBAAc,GAAd,cAAc,CAAgB;QAC9B,YAAM,GAAN,MAAM,CAAwB;QACR,gBAAU,GAAV,UAAU;QAElD,KAAI,CAAC,aAAa,GAAG,IAAI,aAAa,EAAE,CAAC;;KAC1C;IAED;;;;;OAKG;;;;;;;IACH,+BAAO;;;;;;IAAP,UAAQ,GAAmB,EAAE,OAA4B;QAAzD,iBAwBC;QAvBC,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;QAC9B,MAAM,CAAC,iBAAM,OAAO,YAAC,GAAG,EAAE,OAAO,CAAC;aAC/B,KAAK,CAAC,UAAA,YAAY;YACjB,EAAE,CAAC,CAAC,YAAY,IAAI,YAAY,CAAC,MAAM,KAAK,GAAG,CAAC,CAAC,CAAC;gBAChD,IAAI,KAAK,GAAc,KAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;;gBAEvE,EAAE,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,KAAK,IAAI,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC;oBAC/D,IAAI,IAAI,GAAW,yCAAyC,GAAG,KAAK,CAAC,YAAY,CAAC;oBAClF,MAAM,CAAC,iBAAM,IAAI,aAAC,KAAI,CAAC,MAAM,CAAC,aAAa,EAAE,IAAI,EAAE;wBACjD,OAAO,EAAE,kBAAkB,CAAC,aAAa;qBAC1C,CAAC,CAAC,GAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAE,EAAf,CAAe,CAAC;yBAChC,QAAQ,CAAC,UAAA,KAAK;wBACb,KAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAI,CAAC,MAAM,CAAC,cAAc,EAAE,KAAK,CAAC,CAAC;;wBAE5D,MAAM,CAAC,KAAI,CAAC,OAAO,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;qBACnC,CAAC,CAAC;iBACN;gBAAC,IAAI,CAAC,CAAC;oBACN,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;iBACvC;aACF;YAAC,IAAI,CAAC,CAAC;gBACN,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;aACvC;SACF,CAAC,CAAC;KACN;IAED;;;;OAIG;;;;;;IACK,kCAAU;;;;;IAAlB,UAAmB,GAAmB,EAAE,OAA2B;QACjE,IAAI,UAAU,GAAW,CAAC,GAAG,YAAY,OAAO,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC;QAClE,IAAI,QAAQ,GAAY,IAAI,CAAC,MAAM,CAAC,kBAAkB,CAAC,IAAI,CAAC,UAAA,EAAE,IAAI,OAAA,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,EAAnB,CAAmB,CAAC,CAAC;QAEvF,EAAE,CAAC,CAAC,OAAO,IAAI,IAAI,IAAI,QAAQ,CAAC,CAAC,CAAC;;YAEhC,OAAO,GAAG,IAAI,cAAc,EAAE,CAAC;SAChC;QAAC,IAAI,CAAC,CAAC;YACN,OAAO,GAAG,IAAI,cAAc,EAAE,CAAC;SAChC;QACD,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,IAAI,IAAI,CAAC,CAAC,CAAC;YAC5B,OAAO,CAAC,OAAO,GAAG,IAAI,OAAO,EAAE,CAAC;SACjC;QAED,IAAI,OAAO,GAAW,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;QACvD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;YACtD,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,wBAAwB,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,WAAW,GAAG,OAAO,CAAC,CAAC;YACjH,EAAE,CAAC,CAAC,GAAG,YAAY,OAAO,CAAC,CAAC,CAAC;gBAC3B,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,mBAAmB,EAAE,wBAAwB,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,GAAG,WAAW,GAAG,OAAO,CAAC,CAAC;aAC9G;SACF;QAED,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC;YACvD,IAAI,KAAK,GAAc,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;YACvE,EAAE,CAAC,CAAC,SAAS,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;gBAC7B,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,SAAS,GAAG,KAAK,CAAC,WAAW,CAAC,CAAC;gBACpE,EAAE,CAAC,CAAC,GAAG,YAAY,OAAO,CAAC,CAAC,CAAC;oBAC3B,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,eAAe,EAAE,SAAS,GAAG,KAAK,CAAC,WAAW,CAAC,CAAC;iBACjE;aACF;SACF;KACF;wBAvGH;EAwBmC,IAAI;;;;;IAsFrC,8BAAM,GAAN,UAAO,GAAmB;QACxB,IAAI,IAAI,GAAQ,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;QACxD,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;QAEhB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,CAAC;KAChD;wBAnHH","sourcesContent":["import { Injectable, Inject, VERSION } from '@angular/core';\nimport {\n  Http,\n  ConnectionBackend,\n  Response,\n  RequestOptionsArgs,\n  Request,\n  RequestOptions,\n  XHRBackend,\n  Headers\n} from '@angular/http';\nimport { Observable } from 'rxjs/Observable';\nimport { JsonGetOptions } from './stormpath.service';\nimport { TokenStoreManager } from './token-store.manager';\nimport { StormpathConfiguration, StormpathConstants } from './stormpath.config';\nimport { AuthToken } from './auth.token';\n\n// function that allows overriding the default Http provider\nexport function httpFactory(backend: XHRBackend, defaultOptions: RequestOptions,\n                            config: StormpathConfiguration, tokenStore: TokenStoreManager): Http {\n  return new StormpathHttp(backend, defaultOptions, config, tokenStore);\n}\n\n@Injectable()\nexport class StormpathHttp extends Http {\n  private currentDomain: CurrentDomain;\n\n  constructor(private backend: ConnectionBackend,\n              private defaultOptions: RequestOptions,\n              private config: StormpathConfiguration,\n              @Inject('tokenStore') private tokenStore: TokenStoreManager) {\n    super(backend, defaultOptions);\n    this.currentDomain = new CurrentDomain();\n  }\n\n  /**\n   * Override all requests to add x-stormpath-agent and authorization headers when appropriate\n   * @param url the url or a Request\n   * @param options request options\n   * @returns {Observable<Response>} the response as an observable\n   */\n  request(url: string|Request, options?: RequestOptionsArgs): Observable<Response> {\n    this.addHeaders(url, options);\n    return super.request(url, options)\n      .catch(initialError => {\n        if (initialError && initialError.status === 401) {\n          let token: AuthToken = this.tokenStore.get(this.config.oauthTokenName);\n          // token might be expired, try to refresh\n          if ((!AuthToken.isValid(token)) && token && token.refreshToken) {\n            let data: string = 'grant_type=refresh_token&refresh_token=' + token.refreshToken;\n            return super.post(this.config.oauthLoginUri, data, {\n              headers: StormpathConstants.OAUTH_HEADERS\n            }).map(response => response.json())\n              .mergeMap(token => {\n                this.tokenStore.setToken(this.config.oauthTokenName, token);\n                // attempt the same request again\n                return this.request(url, options);\n              });\n          } else {\n            return Observable.throw(initialError);\n          }\n        } else {\n          return Observable.throw(initialError);\n        }\n      });\n  }\n\n  /**\n   * Add Stormpath headers and be aware of options versus request.headers\n   * @param url\n   * @param options\n   */\n  private addHeaders(url: string|Request, options: RequestOptionsArgs): void {\n    let requestUri: string = (url instanceof Request) ? url.url : url;\n    let addToken: boolean = this.config.autoAuthorizedUris.some(rx => rx.test(requestUri));\n\n    if (options == null && addToken) {\n      // add headers 'accept: application/json' and 'withCredential: true'\n      options = new JsonGetOptions();\n    } else {\n      options = new RequestOptions();\n    }\n    if (options.headers == null) {\n      options.headers = new Headers();\n    }\n\n    let version: string = (VERSION) ? VERSION.full : '2.x';\n    if (this.config.endpointUris.indexOf(requestUri) > -1) {\n      options.headers.set('X-Stormpath-Agent', 'stormpath-sdk-angular/' + this.config.version + ' angular/' + version);\n      if (url instanceof Request) {\n        url.headers.set('X-Stormpath-Agent', 'stormpath-sdk-angular/' + this.config.version + ' angular/' + version);\n      }\n    }\n\n    if (!this.currentDomain.equals(requestUri) && addToken) {\n      let token: AuthToken = this.tokenStore.get(this.config.oauthTokenName);\n      if (AuthToken.isValid(token)) {\n        options.headers.set('Authorization', 'Bearer ' + token.accessToken);\n        if (url instanceof Request) {\n          url.headers.set('Authorization', 'Bearer ' + token.accessToken);\n        }\n      }\n    }\n  }\n}\n\n@Injectable()\nexport class CurrentDomain {\n  private window: any = window;\n\n  equals(url: string|Request): boolean {\n    let link: any = this.window.document.createElement('a');\n    link.href = url;\n\n    return this.window.location.host === link.host;\n  }\n}\n"]}