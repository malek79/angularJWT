{"version":3,"file":"register.component.js","sourceRoot":"","sources":["../../../../src/register/register.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,eAAe,CAAC;AACtE,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAE7C,OAAO,EAAE,OAAO,EAAE,MAAM,mBAAmB,CAAC;AAC5C,OAAO,EAAE,SAAS,EAAE,cAAc,EAAE,qBAAqB,EAAE,MAAM,gCAAgC,CAAC;;IAiDhG,2BAAmB,SAAoB;QAApB,cAAS,GAAT,SAAS,CAAW;QACrC,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;QACtB,IAAI,CAAC,SAAS,GAAG;YACf,KAAK,EAAE,EAAE;YACT,OAAO,EAAE,EAAE;YACX,SAAS,EAAE,EAAE;YACb,QAAQ,EAAE,EAAE;SACb,CAAC;KACH;IAED,oCAAQ,GAAR;QAAA,iBAOC;QANC,IAAI,CAAC,SAAS,CAAC,wBAAwB,EAAE;aACtC,SAAS,CAAC,UAAA,KAAK;YACZ,KAAI,CAAC,KAAK,GAAG,KAAK,CAAC;SACpB,EAAE,UAAA,KAAK;YACN,OAAA,KAAI,CAAC,KAAK,GAAG,KAAK,CAAC,OAAO;QAA1B,CAA0B,CAC7B,CAAC;KACL;IAED,oCAAQ,GAAR;QAAA,iBAgBC;QAfC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC;aACpC,SAAS,CAAC,UAAC,OAAgB;YAC1B,KAAI,CAAC,UAAU,GAAG,IAAI,CAAC;YACvB,KAAI,CAAC,UAAU,GAAG,OAAO,CAAC,MAAM,KAAK,YAAY,CAAC;YAClD,KAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,MAAM,KAAK,SAAS,CAAC;YAE7C,EAAE,CAAC,CAAC,KAAI,CAAC,QAAQ,IAAI,KAAI,CAAC,SAAS,CAAC,CAAC,CAAC;gBACpC,IAAI,YAAY,GAAmB;oBACjC,KAAK,EAAE,KAAI,CAAC,SAAS,CAAC,KAAK;oBAC3B,QAAQ,EAAE,KAAI,CAAC,SAAS,CAAC,QAAQ;iBAClC,CAAC;gBAEF,KAAI,CAAC,SAAS,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;aACpC;SACF,EAAE,UAAA,KAAK,IAAI,OAAA,KAAI,CAAC,KAAK,GAAG,KAAK,CAAC,OAAO,EAA1B,CAA0B,CAAC,CAAC;KAC3C;IAED,oCAAQ,GAAR;QACE,IAAI,CAAC,QAAQ,EAAE,CAAC;KACjB;4BA9FH","sourcesContent":["import { Component, Input, OnInit, TemplateRef } from '@angular/core';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\n\nimport { Account } from '../shared/account';\nimport { Stormpath, LoginFormModel, RegistrationFormModel } from '../stormpath/stormpath.service';\n\n@Component({\n  selector: 'register-form',\n  template: `<ng-template #defaultTemplate>\n  <form *ngIf=\"!registered\" (ngSubmit)=\"onSubmit()\" class=\"form-horizontal\" autocomplete=\"off\">\n    <div class=\"form-group\" *ngFor=\"let field of model?.form?.fields\">\n      <label [attr.for]=\"field.name\" class=\"col-sm-4 control-label\">{{field.label}}</label>\n      <div class=\"col-sm-8\">\n        <input class=\"form-control\" [name]=\"field.name\" [id]=\"field.name\" [type]=\"field.type\"\n               [(ngModel)]=\"formModel[field.name]\" [placeholder]=\"field.placeholder\" [disabled]=\"creating\" [required]=\"field.required\">\n      </div>\n    </div>\n    <div *ngIf=\"error\" class=\"alert alert-danger\">{{error}}</div>\n    <button type=\"submit\" class=\"btn btn-primary\">Register</button>\n  </form>\n  <p *ngIf=\"unverified\" class=\"alert alert-success\">\n    Your account has been created and requires verification.\n    Please check your email for a verification link.\n  </p>\n  <p class=\"alert alert-success\" *ngIf=\"canLogin\">\n    Your account has been created, you may now log in.\n  </p>\n</ng-template>\n<ng-template\n  [ngTemplateOutlet]=\"customTemplate || defaultTemplate\">\n</ng-template>`\n})\n@Injectable()\nexport class RegisterComponent implements OnInit {\n  /**\n   * A reference to a `<ng-template>` tag that if set will override this component's template. Use like so:\n   * ```\n   * <ng-template #customTemplate>\n   *   // custom HTML with login form\n   * </ng-template>\n   * ```\n   * Then pass customTemplate to the `register-form` component like so `[customTemplate]=\"customTemplate\"`\n   */\n  @Input() customTemplate: TemplateRef<any>;\n  @Input() autoLogin: boolean;\n  protected model: Object;\n  protected error: string;\n  protected viewModel$: Observable<Object>;\n  protected formModel: RegistrationFormModel;\n  protected unverified: boolean;\n  protected canLogin: boolean;\n  protected registered: boolean;\n\n  constructor(public stormpath: Stormpath) {\n    this.unverified = false;\n    this.canLogin = false;\n    this.formModel = {\n      email: '',\n      surname: '',\n      givenName: '',\n      password: ''\n    };\n  }\n\n  ngOnInit(): void {\n    this.stormpath.getRegistrationViewModel()\n      .subscribe(model => {\n          this.model = model;\n        }, error =>\n          this.error = error.message\n      );\n  }\n\n  register(): void {\n    this.stormpath.register(this.formModel)\n      .subscribe((account: Account) => {\n        this.registered = true;\n        this.unverified = account.status === 'UNVERIFIED';\n        this.canLogin = account.status === 'ENABLED';\n\n        if (this.canLogin && this.autoLogin) {\n          let loginAttempt: LoginFormModel = {\n            login: this.formModel.email,\n            password: this.formModel.password\n          };\n\n          this.stormpath.login(loginAttempt);\n        }\n      }, error => this.error = error.message);\n  }\n\n  onSubmit(): void {\n    this.register();\n  }\n}\n"]}